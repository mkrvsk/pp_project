openapi: 3.0.0
info:
  title: Сервіс Статей
  description: Написати сервіс статей (2000 символів). Статті є публічними для всіх, зареєстровані користувачі можуть редагувати статтю та очікувати на схвалення її модераторами (користувачі із більшими правами). Передбачити варіант редагування, коли стаття на розгляді модератором, а інший користувач її теж редагує. Модератори мають бачити статті, які очікують їх схвалення
  version: 0.0.1
  contact:
    url: "https://github.com/salabay777/pp_project"
servers:
- url: /
tags:
- name: article
  description: Operations about articles
- name: user
  description: Users functions and operations about user
- name: role
  description: Operations about roles of users
- name: status
  description: Operations about status
paths:
  /status:
    post:
      tags:
      - status
      summary: Add a new status
      operationId: addStatus
      requestBody:
        description: Create a new status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
          application/xml:
            schema:
              $ref: '#/components/schemas/Status'
        required: true
      responses:
        200:
          description: status was successfully added
        400:
          description: status with such name already exists
        404:
          description: Body wasn't defined
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /status/{StatusId}:
    get:
      tags:
      - status
      summary: Get status
      parameters:
      - name: StatusId
        in: path
        description: ID of Status to found
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Status'
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        400:
          description: Invalid statusId supplied
        404:
          description: A status with provided ID was not found
    delete:
      tags:
      - status
      summary: Delete a Status
      operationId: deleteStatus
      parameters:
      - name: StatusId
        in: path
        description: Status ID to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: status was successfully deleted
        400:
          description: Invalid statusId supplied
        404:
          description: A status with provided ID was not found
      security:
      - ApiKeyAuth: []
  /role:
    post:
      tags:
      - role
      summary: Add a new role
      operationId: addRole
      requestBody:
        description: Create a new role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/xml:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        200:
          description: role was successfully added
        400:
          description: role with such name already exists
        404:
          description: Body wasn't defined
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /role/{RoleId}:
    get:
      tags:
      - role
      summary: Get role
      parameters:
      - name: RoleId
        in: path
        description: ID of Role to found
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Role'
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: Invalid roleId supplied
        404:
          description: A role with provided ID was not found
    delete:
      tags:
      - role
      summary: Delete a Role
      operationId: deleteRole
      parameters:
      - name: RoleId
        in: path
        description: Role ID to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: role was successfully deleted
        400:
          description: Invalid roleId supplied
        404:
          description: A role with provided ID was not found
      security:
      - ApiKeyAuth: []
  /article:
    post:
      tags:
      - article
      summary: Add a new article
      operationId: addArticle
      requestBody:
        description: Create a new article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        200:
          description: article was successfully added
        400:
          description: Body wasn't defined right
        404:
          description: Selected ID is already in use
      security:
      - ApiKeyAuth: []
  /article/{ArticleId}:
    get:
      tags:
      - article
      summary: Get article to read
      parameters:
      - name: ArticleId
        in: path
        description: ID of Article to found
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        404:
          description: A article with provided ID was not found
        400:
          description: Entered ID does not right
    put:
      tags:
      - article
      summary: Update a Article
      operationId: updateArticle
      parameters:
      - name: ArticleId
        in: path
        description: Article ID to update
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: article was successfully updated
        400:
          description: Invalid articleId supplied
          content: {}
        404:
          description: A article with provided ID was not found
          content: {}
    delete:
      tags:
      - article
      summary: Delete a Article
      operationId: deleteArticle
      parameters:
      - name: ArticleId
        in: path
        description: Article ID to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: article was successfully deleted
        400:
          description: Invalid articleId supplied
          content: {}
        404:
          description: A article with provided ID was not found
          content: {}
      security:
      - ApiKeyAuth: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the unlogged in user
      operationId: createUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: body wasn't defined right
        404:
          description: user with such username already exists
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by user id
      operationId: getUserByID
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid userId supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - ApiKeyAuth: []
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: User was successfully deleted
        400:
          description: Invalid userID supplied
        404:
          description: User not found
      security:
      - ApiKeyAuth: []
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: User was successfully deleted
        400:
          description: Invalid userID supplied
        404:
          description: User not found
      security:
      - ApiKeyAuth: []
components:
  schemas:
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        role:
          type: string
          example: moderator
      xml:
        name: Role
    Status:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          example: moderator
      xml:
        name: Status
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          example: user
        firstName:
          type: string
          example: Francic
        lastName:
          type: string
          example: Underwood
        email:
          type: string
          example: user@email.com
        password:
          type: string
          example: anothersomepassword
        role_id:
          type: integer
          format: int64
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: Einstein's theory of relativity
        text:
          type: string
          example: Something about the theory of relativity
        user_id:
          type: integer
          format: int64
        moderator_id:
          type: integer
          format: int64
        date:
          type: string
        status_id:
          type: integer
          format: int64
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: API-Key
      in: header